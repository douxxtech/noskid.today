class NskdLbr{constructor(t={}){this.apiUrl=t.apiUrl||"https://check.noskid.today/",this.debug=t.debug||!1,this.timeout=t.timeout||1e4,this.strictCheck=t.strictCheck!==void 0?t.strictCheck:!0,this.onLog=t.onLog||null,this.certificateData=null,this.verificationKey=null,this.localData=null,this.isValid=!1}nskdLbrLog(t,e="info"){if(this.debug){const i=`[${new Date().toLocaleTimeString()}] NoSkid:`;switch(e){case"error":console.error(i,t);break;case"warning":console.warn(i,t);break;case"success":console.nskdLbrLog(`%c${i} ${t}`,"color: green");break;default:console.nskdLbrLog(i,t)}}this.onLog&&typeof this.onLog=="function"&&this.onLog(t,e)}async loadFromFile(t){try{if(this.nskdLbrLog("Starting certificate verification process...","info"),!t)throw new Error("No file provided");if(!t.name.toLowerCase().endsWith(".png"))throw new Error("File must be a PNG image");this.nskdLbrLog(`Processing certificate file: ${t.name}`,"info");const e=await this.readFileAsArrayBuffer(t),r=await this.extractTextFromPng(e);if(!r)throw new Error("Could not extract verification data from file");if(this.verificationKey=this.extractVerificationKey(r),!this.verificationKey)throw new Error("No valid verification key found in certificate");return this.nskdLbrLog("Successfully extracted verification key","success"),this.localData=this.extractLocalData(r),this.localData&&(this.nskdLbrLog("Local certificate data extracted:","info"),this.nskdLbrLog(`Username: ${this.localData.username}`,"info"),this.nskdLbrLog(`Creation Date: ${this.localData.creationDate}`,"info")),await this.verifyWithAPI()}catch(e){throw this.nskdLbrLog(`Error loading certificate: ${e.message}`,"error"),e}}async verifyWithKey(t){try{if(!t||typeof t!="string")throw new Error("Invalid verification key provided");if(!/^[a-f0-9]{64}$/i.test(t))throw new Error("Verification key must be a 64-character hexadecimal string");return this.verificationKey=t.toLowerCase(),this.nskdLbrLog(`Verifying certificate with key: ${this.verificationKey.substring(0,16)}...`,"info"),await this.verifyWithAPI()}catch(e){throw this.nskdLbrLog(`Error verifying certificate: ${e.message}`,"error"),e}}getCertificateData(){return this.certificateData}isValidCertificate(){return this.isValid}getFormattedDetails(){if(!this.certificateData)return"No certificate data available";const t=this.certificateData;return`
Certificate Details:
- Certificate #: ${t.certificate_number}
- Username: ${t.username}
- Percentage: ${t.percentage}%
- Creation Date: ${t.creationDate}
- Country: ${t.country} (${t.countryCode})
        `.trim()}reset(){this.certificateData=null,this.verificationKey=null,this.localData=null,this.isValid=!1,this.nskdLbrLog("Certificate data reset","info")}readFileAsArrayBuffer(t){return new Promise((e,r)=>{const i=new FileReader;i.onload=a=>e(a.target.result),i.onerror=()=>r(new Error("Error reading file")),i.readAsArrayBuffer(t)})}async extractTextFromPng(t){try{const e=new Uint8Array(t);if(!(e[0]===137&&e[1]===80&&e[2]===78&&e[3]===71))throw new Error("Not a valid PNG file");let r=8,i=null;for(;r<e.length-12;){const a=e[r]<<24|e[r+1]<<16|e[r+2]<<8|e[r+3];if(String.fromCharCode(e[r+4],e[r+5],e[r+6],e[r+7])==="tEXt"){const l=e.slice(r+8,r+8+a),s=new TextDecoder("utf-8").decode(l),o=s.indexOf("\0");if(o!==-1){const n=s.substring(0,o),d=s.substring(o+1);if(n==="noskid-key"){i=d;break}}}r+=8+a+4}return i?(this.nskdLbrLog("Certificate data extracted successfully from PNG","success"),i):(this.nskdLbrLog("No 'noskid-key' text chunk found in PNG","error"),null)}catch(e){return this.nskdLbrLog(`Error extracting text from PNG: ${e.message}`,"error"),null}}extractVerificationKey(t){try{const e=/-*BEGIN NOSKID KEY-*\s*([a-f0-9]{64})/i,r=t.match(e);return r?r[1].toLowerCase():null}catch(e){return this.nskdLbrLog(`Error extracting verification key: ${e.message}`,"error"),null}}extractLocalData(t){try{const e=/-----BEGIN NOSKID KEY-----\s*([a-f0-9]+)\s*([A-Za-z0-9+/=]+)\s*([A-Za-z0-9+/=]+)\s*-----END NOSKID KEY-----/,r=t.match(e);if(!r)return null;const i=r[2],c=atob(i.replace(/=/g,"")).match(/CERT-\d+-(.+)/),l=c?c[1]:null,s=r[3],n=atob(s.replace(/=/g,"")).match(/CREATED-(.+)/),d=n?n[1]:null;return{username:l,creationDate:d}}catch(e){return this.nskdLbrLog(`Error extracting local data: ${e.message}`,"error"),null}}async verifyWithAPI(){try{this.nskdLbrLog("Verifying certificate with server...","info");const t=new AbortController,e=setTimeout(()=>t.abort(),this.timeout),r=await fetch(`${this.apiUrl}?key=${encodeURIComponent(this.verificationKey)}`,{signal:t.signal,headers:{"User-Agent":"NskdLbr/1.0.0"}});if(clearTimeout(e),!r.ok)throw new Error(`HTTP ${r.status}: ${r.statusText}`);const i=await r.json();if(!i.success)return this.isValid=!1,this.nskdLbrLog(`Certificate verification failed: ${i.message}`,"error"),{valid:!1,message:i.message,cached:i.cached||!1};if(this.localData&&this.strictCheck){const a=this.compareData(this.localData,i.data);if(!a.valid)return this.isValid=!1,this.nskdLbrLog("Certificate data mismatch!","error"),this.nskdLbrLog(`Mismatch reason: ${a.reason}`,"error"),this.nskdLbrLog("Note: Strict checking is enabled. Set strictCheck to false to skip local data validation.","warning"),{valid:!1,message:`Data mismatch: ${a.reason}`,cached:i.cached||!1,strictCheck:!0};this.nskdLbrLog("Local data validation passed","success")}else this.localData&&!this.strictCheck&&this.nskdLbrLog("Strict checking disabled - skipping local data validation","warning");return this.isValid=!0,this.certificateData=i.data,this.nskdLbrLog("Certificate is VALID!","success"),{valid:!0,message:"Certificate verified successfully",data:i.data,cached:i.cached||!1,strictCheck:this.strictCheck}}catch(t){throw t.name==="AbortError"?new Error("Request timeout - server took too long to respond"):new Error(`API verification failed: ${t.message}`)}}compareData(t,e){if(!t||!e)return{valid:!1,reason:"Missing data for comparison"};if(t.username!==e.username)return{valid:!1,reason:`Username mismatch: Local=${t.username}, API=${e.username}`};const r=t.creationDate.substring(0,16),i=e.creationDate.substring(0,16);return r!==i?{valid:!1,reason:`Creation date mismatch: Local=${r}, API=${i}`}:{valid:!0}}}typeof module<"u"&&module.exports?module.exports=NskdLbr:window.NskdLbr=NskdLbr;